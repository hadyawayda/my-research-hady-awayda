Creating custom exceptions in Java involves extending the Exception class (for checked exceptions) or the RuntimeException class (for unchecked exceptions). Here's how to create them:

public class MyCheckedException extends Exception {
    public MyCheckedException(String message) {
        super(message);
    }

    public MyCheckedException(String message, Throwable cause) {
        super(message, cause);
    }
}

Example of a Custom Unchecked Exception:

public class MyUncheckedException extends RuntimeException {
    public MyUncheckedException(String message) {
        super(message);
    }

    public MyUncheckedException(String message, Throwable cause) {
        super(message, cause);
    }
}

The throws clause is used in a method signature to declare that a method can throw one or more exceptions. This informs the caller of the method that it must handle these exceptions, either with a try-catch block or by further declaring them in its own throws clause. Example: 

public void someMethod() throws IOException, MyCheckedException {
    // Method code
}

Difference:
- Custom Exceptions: Extend Exception for checked exceptions, RuntimeException for unchecked exceptions.
- Checked Exceptions: Must be declared in the method signature and caught or rethrown. These exceptions are checked at compile-time. They must be either caught or declared in the method signature using the throws keyword.
- Unchecked Exceptions: Do not need to be declared or caught, typically used for programming errors. These exceptions are not checked at compile-time. They are subclasses of RuntimeException.
- `throws` Clause: Used to declare exceptions that a method might throw, requiring the caller to handle them.

Example Combining all the concepts:

Custom Checked Exception:

public class InvalidAgeException extends Exception {
    public InvalidAgeException(String message) {
        super(message);
    }
}

Method Throwing Custom Checked Exception:

public void checkAge(int age) throws InvalidAgeException {
    if (age < 18) {
        throw new InvalidAgeException("Age must be 18 or above.");
    }
}

Handling Custom Checked Exception:

public static void main(String[] args) {
    try {
        checkAge(16);
    } catch (InvalidAgeException e) {
        System.out.println("Caught Exception: " + e.getMessage());
    }
}

Example of Unchecked Exception

Custom Unchecked Exception:

public class InvalidArgumentException extends RuntimeException {
    public InvalidArgumentException(String message) {
        super(message);
    }
}

Method Throwing Custom Unchecked Exception:

public void validateName(String name) {
    if (name == null || name.isEmpty()) {
        throw new InvalidArgumentException("Name cannot be null or empty.");
    }
}

Handling Custom Unchecked Exception:

public static void main(String[] args) {
    try {
        validateName("");
    } catch (InvalidArgumentException e) {
        System.out.println("Caught Exception: " + e.getMessage());
    }
}
